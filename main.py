import logging
import os
import asyncio
import random
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from flask import Flask, render_template_string
from threading import Thread

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = os.getenv("BOT_TOKEN")
GROUP_1_ID = int(os.getenv("GROUP_1_ID"))        # ID –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
GROUP_1_THREAD = int(os.getenv("GROUP_1_THREAD")) # ID –≤–µ—Ç–∫–∏ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
GROUP_2_ID = int(os.getenv("GROUP_2_ID"))        # ID –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã  
GROUP_2_THREAD = int(os.getenv("GROUP_2_THREAD")) # ID –≤–µ—Ç–∫–∏ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
PING_URL = os.getenv("PING_URL", "https://example.com")  # URL –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–∏–Ω–≥–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Middleware: –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
class GroupOnlyMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –≤ –¥–≤—É—Ö –≥—Ä—É–ø–ø–∞—Ö
        if message.chat.id not in [GROUP_1_ID, GROUP_2_ID]:
            raise CancelHandler()

dp.middleware.setup(GroupOnlyMiddleware())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ
join_requests = {
    GROUP_1_ID: [],
    GROUP_2_ID: []
}

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è)
active_joinlist_messages = {}

async def get_group_thread_id(group_id):
    """–ü–æ–ª—É—á–∏—Ç—å ID –≤–µ—Ç–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    if group_id == GROUP_1_ID:
        return GROUP_1_THREAD
    elif group_id == GROUP_2_ID:
        return GROUP_2_THREAD
    return None

async def send_to_thread(group_id, text):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≤–µ—Ç–∫—É –≥—Ä—É–ø–ø—ã"""
    thread_id = await get_group_thread_id(group_id)
    if thread_id:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await bot.send_message(
                chat_id=group_id,
                text=text,
                message_thread_id=thread_id,
                parse_mode='HTML'
            )
        except Exception as e:
            try:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await bot.send_message(
                    chat_id=group_id,
                    text=text,
                    message_thread_id=thread_id,
                    parse_mode=None
                )
            except Exception as e2:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–µ—Ç–∫—É: {e2}")

@dp.message_handler(commands=['joinlist'])
async def join_list_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç—å/–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å"""
    group_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    if not join_requests.get(group_id, []):
        await message.reply("üì≠ –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
    if group_id in active_joinlist_messages:
        try:
            await bot.delete_message(group_id, active_joinlist_messages[group_id])
        except:
            pass
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫:</b>\n\n"
    markup = InlineKeyboardMarkup()
    
    for i, user in enumerate(join_requests[group_id], 1):
        text += f"{i}. @{user['username']} (ID: {user['id']})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        markup.row(
            InlineKeyboardButton(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å #{i}", callback_data=f"accept_{user['id']}_{group_id}"),
            InlineKeyboardButton(f"‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å #{i}", callback_data=f"ignore_{user['id']}_{group_id}")
        )
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
    markup.add(InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"close_list_{group_id}"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    sent_message = await message.reply(text, reply_markup=markup, parse_mode='HTML')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
    active_joinlist_messages[group_id] = sent_message.message_id
    
    # –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    asyncio.create_task(auto_delete_joinlist(group_id, sent_message.message_id))

async def auto_delete_joinlist(group_id, message_id):
    """–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã"""
    await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
    
    if active_joinlist_messages.get(group_id) == message_id:
        try:
            await bot.delete_message(group_id, message_id)
            del active_joinlist_messages[group_id]
        except:
            pass

@dp.callback_query_handler(lambda c: c.data.startswith(('accept_', 'ignore_', 'close_list_')))
async def handle_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–Ω—è—Ç—å/–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å/–∑–∞–∫—Ä—ã—Ç—å"""
    data = callback_query.data
    
    if data.startswith('accept_'):
        # –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        parts = data.split('_')
        user_id = int(parts[1])
        group_id = int(parts[2])
        
        user = next((u for u in join_requests.get(group_id, []) if u['id'] == user_id), None)
        
        if not user:
            await callback_query.answer("‚ùó –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        try:
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
            await bot.approve_chat_join_request(chat_id=group_id, user_id=user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
            join_requests[group_id].remove(user)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
            admin_username = callback_query.from_user.username or "–∞–¥–º–∏–Ω"
            admin_id = callback_query.from_user.id
            user_username = user['username']
            now = (datetime.utcnow() + timedelta(hours=3)).strftime("%d.%m.%Y %H:%M")
            
            log_message = (
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç –≤ –≥—Ä—É–ø–ø—É</b>\n"
                f"üë§ –ü—Ä–∏–Ω—è—Ç: @{user_username} (ID: {user_id})\n"
                f"üë®‚Äçüíº –ü—Ä–∏–Ω—è–ª: @{admin_username} (ID: {admin_id})\n"
                f"‚è∞ –í—Ä–µ–º—è: {now} –ú–°–ö"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≤–µ—Ç–∫—É
            await send_to_thread(group_id, log_message)
            
            await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç!")
            
        except Exception as e:
            await callback_query.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return
    
    elif data.startswith('ignore_'):
        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        parts = data.split('_')
        user_id = int(parts[1])
        group_id = int(parts[2])
        
        user = next((u for u in join_requests.get(group_id, []) if u['id'] == user_id), None)
        
        if user:
            join_requests[group_id].remove(user)
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        else:
            await callback_query.answer("‚ùó –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    elif data.startswith('close_list_'):
        # –ó–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫
        await callback_query.answer("üö´ –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç.")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    group_id = int(data.split('_')[-1])
    try:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        if group_id in active_joinlist_messages:
            del active_joinlist_messages[group_id]
    except:
        pass

@dp.chat_join_request_handler()
async def handle_join_request(request: types.ChatJoinRequest):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
    group_id = request.chat.id
    user_id = request.from_user.id
    username = request.from_user.username or "–±–µ–∑_–Ω–∏–∫–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if group_id not in [GROUP_1_ID, GROUP_2_ID]:
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if group_id not in join_requests:
        join_requests[group_id] = []
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
    if any(u['id'] == user_id for u in join_requests[group_id]):
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ —Å–ø–∏—Å–æ–∫
    join_requests[group_id].append({
        "id": user_id,
        "username": username
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    notification_text = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!</b>\n"
        f"üë§ –û—Ç: @{username} (ID: {user_id})\n"
        f"üìù –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /joinlist"
    )
    
    await bot.send_message(group_id, notification_text, parse_mode='HTML')

@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def private_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    await message.reply("‚ùó –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø.")

# –°–∏—Å—Ç–µ–º–∞ –ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
async def ping_other_bot():
    """–ü–∏–Ω–≥ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    while True:
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 17 –º–∏–Ω—É—Ç
            delay = random.randint(60, 1020)  # 60-1020 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(delay)
            
            async with aiohttp.ClientSession() as session:
                # –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                endpoints = ["/", "/status", "/health", "/ping"]
                endpoint = random.choice(endpoints)
                
                try:
                    async with session.get(f"{PING_URL}{endpoint}", timeout=10) as response:
                        logging.info(f"–ü–∏–Ω–≥ {PING_URL}{endpoint}: {response.status}")
                except:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–∏–Ω–≥–æ–≤–∞—Ç—å {PING_URL}{endpoint}")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–∏–Ω–≥–∞: {e}")

async def self_ping():
    """–°–∞–º–æ–ø–∏–Ω–≥ –±–æ—Ç–∞"""
    while True:
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 14 –º–∏–Ω—É—Ç
            delay = random.randint(60, 840)  # 60-840 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(delay)
            
            # –ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.get("http://localhost:10000/", timeout=5) as response:
                        logging.info(f"–°–∞–º–æ–ø–∏–Ω–≥: {response.status}")
                except:
                    logging.warning("–°–∞–º–æ–ø–∏–Ω–≥ –Ω–µ—É–¥–∞—á–µ–Ω")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: {e}")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –†–∏–∫ –∏ –ú–æ—Ä—Ç–∏
app = Flask(__name__)

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –†–∏–∫ –∏ –ú–æ—Ä—Ç–∏"""
    html_template = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rick & Morty Portal Bot</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Arial', sans-serif;
                background: linear-gradient(45deg, #1a1a2e, #16213e, #0f3460);
                background-size: 600% 600%;
                animation: gradientShift 8s ease infinite;
                height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                overflow: hidden;
            }
            
            @keyframes gradientShift {
                0% { background-position: 0% 50%; }
                50% { background-position: 100% 50%; }
                100% { background-position: 0% 50%; }
            }
            
            .container {
                text-align: center;
                z-index: 10;
            }
            
            .portal {
                width: 200px;
                height: 200px;
                border-radius: 50%;
                background: radial-gradient(circle, #00ff41, #00b8ff, #9400ff);
                animation: portalSpin 3s linear infinite, portalPulse 2s ease-in-out infinite alternate;
                margin: 0 auto 30px;
                position: relative;
                box-shadow: 0 0 50px #00ff41, inset 0 0 50px #00b8ff;
            }
            
            @keyframes portalSpin {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
            
            @keyframes portalPulse {
                from { transform: scale(1); box-shadow: 0 0 50px #00ff41, inset 0 0 50px #00b8ff; }
                to { transform: scale(1.1); box-shadow: 0 0 80px #00ff41, inset 0 0 80px #00b8ff; }
            }
            
            .characters {
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
            }
            
            .rick, .morty {
                position: absolute;
                width: 60px;
                height: 80px;
                background-size: contain;
                background-repeat: no-repeat;
                animation: jump 4s ease-in-out infinite;
            }
            
            .rick {
                background: linear-gradient(to bottom, #87ceeb 30%, #ffffff 30% 60%, #1e90ff 60%);
                left: -80px;
                top: 50%;
                transform: translateY(-50%);
                animation-delay: 0s;
            }
            
            .morty {
                background: linear-gradient(to bottom, #ffd700 30%, #ffffff 30% 60%, #1e90ff 60%);
                right: -80px;
                top: 50%;
                transform: translateY(-50%);
                animation-delay: 2s;
            }
            
            @keyframes jump {
                0%, 100% { transform: translateX(0) translateY(-50%) scale(1); }
                25% { transform: translateX(150px) translateY(-80%) scale(1.2); }
                50% { transform: translateX(300px) translateY(-50%) scale(1); }
                75% { transform: translateX(150px) translateY(-80%) scale(1.2); }
            }
            
            .title {
                color: #00ff41;
                font-size: 2.5em;
                margin-bottom: 20px;
                text-shadow: 0 0 20px #00ff41;
                animation: textGlow 3s ease-in-out infinite alternate;
            }
            
            @keyframes textGlow {
                from { text-shadow: 0 0 20px #00ff41; }
                to { text-shadow: 0 0 40px #00ff41, 0 0 60px #00ff41; }
            }
            
            .status {
                color: #ffffff;
                font-size: 1.2em;
                margin-top: 20px;
                animation: fadeInOut 2s ease-in-out infinite;
            }
            
            @keyframes fadeInOut {
                0%, 100% { opacity: 0.7; }
                50% { opacity: 1; }
            }
            
            .particles {
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                pointer-events: none;
            }
            
            .particle {
                position: absolute;
                width: 4px;
                height: 4px;
                background: #00ff41;
                border-radius: 50%;
                animation: float 6s linear infinite;
            }
            
            @keyframes float {
                0% { 
                    transform: translateY(100vh) scale(0); 
                    opacity: 0;
                }
                10% {
                    opacity: 1;
                }
                90% {
                    opacity: 1;
                }
                100% { 
                    transform: translateY(-100vh) scale(1); 
                    opacity: 0;
                }
            }
        </style>
    </head>
    <body>
        <div class="particles" id="particles"></div>
        
        <div class="container">
            <div class="portal">
                <div class="characters">
                    <div class="rick"></div>
                    <div class="morty"></div>
                </div>
            </div>
            <h1 class="title">RICK & MORTY BOT</h1>
            <div class="status">‚úÖ –ü–æ—Ä—Ç–∞–ª –∞–∫—Ç–∏–≤–µ–Ω! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...</div>
        </div>
        
        <script>
            // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
            function createParticle() {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 6 + 's';
                particle.style.animationDuration = (Math.random() * 4 + 4) + 's';
                
                // –°–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —á–∞—Å—Ç–∏—Ü
                const colors = ['#00ff41', '#00b8ff', '#9400ff', '#ffd700'];
                particle.style.background = colors[Math.floor(Math.random() * colors.length)];
                
                document.getElementById('particles').appendChild(particle);
                
                // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    particle.remove();
                }, 8000);
            }
            
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –∫–∞–∂–¥—ã–µ 200–º—Å
            setInterval(createParticle, 200);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ
            document.addEventListener('click', (e) => {
                for (let i = 0; i < 10; i++) {
                    setTimeout(() => {
                        const spark = document.createElement('div');
                        spark.style.position = 'absolute';
                        spark.style.left = e.clientX + 'px';
                        spark.style.top = e.clientY + 'px';
                        spark.style.width = '6px';
                        spark.style.height = '6px';
                        spark.style.background = '#00ff41';
                        spark.style.borderRadius = '50%';
                        spark.style.pointerEvents = 'none';
                        spark.style.zIndex = '1000';
                        
                        const angle = (Math.PI * 2 * i) / 10;
                        const velocity = 100;
                        const vx = Math.cos(angle) * velocity;
                        const vy = Math.sin(angle) * velocity;
                        
                        let opacity = 1;
                        let x = 0;
                        let y = 0;
                        
                        document.body.appendChild(spark);
                        
                        const animate = () => {
                            x += vx * 0.02;
                            y += vy * 0.02;
                            opacity -= 0.02;
                            
                            spark.style.transform = `translate(${x}px, ${y}px)`;
                            spark.style.opacity = opacity;
                            
                            if (opacity > 0) {
                                requestAnimationFrame(animate);
                            } else {
                                spark.remove();
                            }
                        };
                        
                        animate();
                    }, i * 20);
                }
            });
        </script>
    </body>
    </html>
    """
    return render_template_string(html_template)

@app.route('/status')
def status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return {"status": "active", "timestamp": datetime.now().isoformat()}

@app.route('/health')  
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return {"health": "ok"}

@app.route('/ping')
def ping():
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥"""
    return "pong"

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø–∏–Ω–≥–∞
    loop = asyncio.get_event_loop()
    loop.create_task(ping_other_bot())
    loop.create_task(self_ping())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
